;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname |esercizio 4|) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(define lsd
  (lambda (BTR)
   (cond ((string=? BTR "") "")
         (else (string-ref BTR 0))
         )
    )
  )
(define head
  (lambda (BTR)
    (substring BTR 0 (-(string-length BTR)1)

    )
  )
  )
( define normalized-btr ; val: stringa con cifre zero in testa rimosse
( lambda (BTR) ; s: stringa ( BTR )
( if ( = ( string-length BTR ) 1 )
BTR
( cond (( char=? ( string-ref BTR 0 ) #\. )
( normalized-btr ( substring BTR 1 )))
( else
BTR )))))

;(define normalized-btr2
 ; (lambda(s)
  ;  (if (=(string-length s) 1)
   ;     s
    ;    (cond (( char=? (string-ref s 0) #\.)
     ;         (normalized-btr2 (substring s 0 (string-length s))))
      ;        (else s))
       ; )
    ;)
  ;)

( define btr-carry ; val: riporto in uscita ( carattere )
( lambda ( u v c ) ; u,v: 2 cifre incolonnate ( BTR ) c: riporto in entrata ( BTR )
(cond ((char=? u #\-)
(cond ((char=? v #\-)
(cond ((char=? c #\-) ; - - -
#\-)
((char=? c #\.) ; - - .
#\-)
((char=? c #\+) ; - - +
#\.)))
((char=? v #\.)
(cond ((char=? c #\-) ; - . -
#\-)
((char=? c #\.) ; - . .
#\.)
((char=? c #\+) ; - . +
#\.)))
((char=? v #\+) ; - + c
#\.)))
((char=? u #\.)
(cond ((char=? v #\-)
(cond ((char=? c #\-) ; . - -
#\-)
((char=? c #\.) ; . - .
#\.)
((char=? c #\+) ; . - +
#\.)))
((char=? v #\.) ; . . c
#\. )
((char=? v #\+)
(cond ((char=? c #\-) ; . + -
#\.)
((char=? c #\.) ; . + .
#\.)
((char=? c #\+) ; . + +
#\+)))))
((char=? u #\+)
(cond ((char=? v #\-) ; + - c
#\.)
((char=? v #\.)
(cond ((char=? c #\-) ; + . -
#\.)
((char=? c #\.) ; + . .
#\.)
((char=? c #\+) ; + . +
#\+)))
((char=? v #\+)
(cond ((char=? c #\-) ; + + -
#\.)
((char=? c #\.) ; + + .
#\+)
((char=? c #\+) ; + + +
#\+)))))
)))
(define btr-digit-sum                    ; val:     carattere +/./-
  (lambda (u v c)                        ; u, v, c: caratteri +/./-
    (cond ((char=? u #\-)                ; u v c
           (cond ((char=? v #\-)
                  (cond ((char=? c #\-)  ; - - -
                         #\.)
                        ((char=? c #\.)  ; - - .
                         #\+)
                        ((char=? c #\+)  ; - - +
                         #\-)))
                 ((char=? v #\.)
                  (cond ((char=? c #\-)  ; - . -
                         #\+)
                        ((char=? c #\.)  ; - . .
                         #\-)
                        ((char=? c #\+)  ; - . +
                         #\.)))
                 ((char=? v #\+)         ; - + c
                  c)))
          ((char=? u #\.)
           (cond ((char=? v #\-)
                  (cond ((char=? c #\-)  ; . - -
                         #\+)
                        ((char=? c #\.)  ; . - .
                         #\-)
                        ((char=? c #\+)  ; . - +
                         #\.)))
                 ((char=? v #\.)         ; . . c
                  c)
                 ((char=? v #\+)
                  (cond ((char=? c #\-)  ; . + -
                         #\.)
                        ((char=? c #\.)  ; . + .
                         #\+)
                        ((char=? c #\+)  ; . + +
                         #\-)))))
          ((char=? u #\+)
           (cond ((char=? v #\-)         ; + - c
                  c)
                 ((char=? v #\.)
                  (cond ((char=? c #\-)  ; + . -
                         #\.)
                        ((char=? c #\.)  ; + . .
                         #\+)
                        ((char=? c #\+)  ; + . +
                         #\-)))
                 ((char=? v #\+)
                  (cond ((char=? c #\-)  ; + + -
                         #\+)
                        ((char=? c #\.)  ; + + .
                         #\-)
                        ((char=? c #\+)  ; + + +
                         #\.)))))
          )))


(define btr-carry-sum
  (lambda (fst snd carry)
    (let ((lsd-st (lsd fst)) (lsd-nd (lsd snd)))
      (let ((result-sum (btr-digit-sum lsd-st lsd-nd carry)) (result-carry (btr-carry lsd-st lsd-nd carry)))
        (if (and (= (string-length snd) 0) (char=? result-carry #\.))
            (string-append (head fst) (string result-sum))
            (string-append (btr-carry-sum (head fst) (head snd) result-carry) (string result-sum))
        )
      )
    )
  )
)
(define btr-sum
  (lambda (fst snd)
    (normalized-btr (btr-carry-sum fst snd #\.))
  )
)

(btr-sum "-+--" "+") ; => -+-.
(btr-sum "-+--" "-") ; => -.++
(btr-sum "+-.+" "-+.-") ; => .
(btr-sum "-+--+" "-.--") ; => --++.
(btr-sum "-+-+." "-.-+") ; => -.-.+
(btr-sum "+-+-." "+.+-") ; => +.+.-
